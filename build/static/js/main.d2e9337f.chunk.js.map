{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hash","window","location","replace","split","keys","speakers","indexOf","genres","state","speaker","genre","concat","_this2","react_default","a","createElement","className","title","width","height","src","frameBorder","allow","map","key","style","backgroundImage","opacity","onClick","setState","objectSpread","type","value","readOnly","navigator","clipboard","writeText","text","textArea","document","body","appendChild","focus","select","removeChild","fallbackCopyTextToClipboard","target","rel","href","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2e9337f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport speakers from './environments/speakers.environment.json';\nimport genres from './environments/genres.environment.json';\nimport './App.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n    const hash = window.location.hash.replace('#', '').split('/');\n    if (\n      Object.keys(speakers).indexOf(hash[0]) !== -1 &&\n      Object.keys(genres).indexOf(hash[1]) !== -1 \n    ) {\n      this.state = {\n        speaker: hash[0],\n        genre: hash[1]\n      };\n    } else {\n      this.state = {\n        speaker: Object.keys(speakers)[0],\n        genre: Object.keys(genres)[0]\n      }\n    }\n    window.location.hash = `${this.state.speaker}/${this.state.genre}`;\n  }\n\n  componentDidUpdate() {\n    window.location.hash = `${this.state.speaker}/${this.state.genre}`;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          {\n            /* title */\n            (this.state.speaker && this.state.genre) ?\n            <h1>\n              You're listening too\n              <span>{this.state.speaker.replace('-', ' ')}</span>\n              with {this.state.genre.replace('-', ' ')}...\n            </h1> : <h1>Loading...</h1>\n          }\n          {/* videos */}\n          <iframe title=\"speaker\" width=\"400\" height=\"225\" src={`https://www.youtube.com/embed/videoseries?list=${speakers[this.state.speaker]}&autoplay=1`} frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"></iframe>\n          <iframe title=\"music\" width=\"400\" height=\"225\" src={`https://www.youtube.com/embed/videoseries?list=${genres[this.state.genre]}&autoplay=1`} frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"></iframe>\n          <div className=\"speakers\">\n            {\n              /* speakers */\n              Object.keys(speakers).map(speaker => {\n                return <div key={speaker} style={{\n                  backgroundImage: `url(assets/images/${speaker}.png)`,\n                  opacity: (this.state.speaker === speaker) ? '0.5' : '1'\n                }} onClick={() => {\n                  this.setState({\n                    ...this.state,\n                    speaker: speaker\n                  });\n                }}></div>\n              })\n            }\n          </div>\n          <div className=\"music\">\n            {\n              /* music */\n              Object.keys(genres).map(genre => {\n                return <div key={genre} style={{\n                  opacity: (this.state.genre === genre) ? '0.5' : '1'\n                }} onClick={() => {\n                  this.setState({\n                    ...this.state,\n                    genre: genre\n                  });\n                }}>{genre.replace('-', ' ')}</div>\n              })\n            }\n          </div>\n          {/* share */}\n          <span className=\"share\">\n            <span>Share This Mix:</span>\n            <input type=\"text\" value={`http://www.yogifm.com/#${this.state.speaker}/${this.state.genre}`} readOnly />\n            <button onClick={() => {\n              function fallbackCopyTextToClipboard(text) {\n                var textArea = document.createElement('textarea');\n                textArea.value = text;\n                document.body.appendChild(textArea);\n                textArea.focus();\n                textArea.select();\n                document.body.removeChild(textArea);\n              }\n              if (!navigator.clipboard) fallbackCopyTextToClipboard(`http://www.yogifm.com/#${this.state.speaker}/${this.state.genre}`);\n              else navigator.clipboard.writeText(`http://www.yogifm.com/#${this.state.speaker}/${this.state.genre}`);\n            }}>Copy</button>\n          </span>\n          {/* footer */}\n          <span className=\"footer\">Yogi FM | Developed by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/jadeallencook\">@jadeallencook</a></span>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}